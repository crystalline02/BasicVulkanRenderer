# version 460 core

struct Particle
{
    vec3 position;
    vec4 color;
    vec3 velosity;
};

layout(set = 0, binding = 0) uniform ParticleUBO
{
    float deltaTime;
    int particleCount;
} particleUBO;

layout(set = 0, binding = 1) readonly buffer particlesReadSSBO
{
    Particle particlesIn[];
};

layout(set = 0, binding = 2) writeonly buffer particlesWriteSBBO
{
    Particle particlesOut[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    // if(gl_GlobalInvocationID.x > particleUBO.particleCount) return;
    uint index = gl_GlobalInvocationID.x;
    Particle particleIn = particlesIn[index];
    
    // particlesOut[gl_GlobalInvocationID.x].position = particleIn.position + particleIn.velosity * particleUBO.deltaTime;
    // particlesOut[gl_GlobalInvocationID.x].velosity = particleIn.velosity; 
    // particlesOut[gl_GlobalInvocationID.x].color = particleIn.color;

    particlesOut[index].position = particleIn.position + vec3(0.003f, 0.f, 0.f);
    particlesOut[index].velosity = particleIn.velosity; 
    particlesOut[index].color = particleIn.color;
}